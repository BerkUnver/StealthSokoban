#ifdef VERTEX_SHADER
layout(location=LOC_POSITION) in vec3 vertex_position;
#else
layout(location=0) out vec4 fragment_color;
#endif

uniform usamplerBuffer viewed;
uniform ivec3 viewed_position;
uniform ivec3 viewed_size;
uniform mat4 world_to_camera;

uniform mat4 model_to_world;
uniform vec4 color;

OUTIN vec3 fragment_position;

void main() {
#ifdef VERTEX_SHADER
    vec4 world_position = model_to_world * vec4(vertex_position, 1.0);
    fragment_position = world_position.xyz;
    gl_Position = world_to_camera * world_position;
#else
    int index;
    bool success = get_3d_index(ivec3(floor(fragment_position)) - viewed_position, viewed_size, index);

    if (!success) {
        fragment_color = color;
        return;
    }
    
    
    uint filled = texelFetch(viewed, index).r;

    if ((filled & VIEW_STATE_VISIBLE) != 0u) {
        fragment_color = color;
    } else if ((filled & VIEW_STATE_SEEN) != 0u) {
        fragment_color = color;
        fragment_color.rgb *= SEEN_BRIGHTNESS;
    } else {
        discard;
    }
#endif
}
