#ifdef VERTEX_SHADER
layout(location=LOC_POSITION)      in vec3 vertex_position;
layout(location=LOC_UV)            in vec2 vertex_uv;
layout(location=LOC_VIEWED_OFFSET) in ivec3 vertex_viewed_offset;
layout(location=LOC_OUTLINE_UV)    in vec2 vertex_outline_uv;
#else
layout(location=0) out vec4 fragment_color;
#endif

uniform sampler2D bitmap;
uniform sampler2D outline_bitmap;
uniform mat4 projection;
uniform vec4 color;

#ifdef GAMEPLAY
uniform usamplerBuffer viewed;
uniform ivec3 viewed_size;
uniform ivec3 viewed_position;
#endif


centroid OUTIN vec2 fragment_uv;
centroid OUTIN vec2 fragment_outline_uv;

#ifdef GAMEPLAY
OUTIN float fragment_brightness;
#endif


// @Speed figure out how to optimize branching
void main() {
#ifdef VERTEX_SHADER
#ifdef GAMEPLAY
    ivec3 viewed_coord = viewed_position + vertex_viewed_offset;
    
    int index;
    bool success = get_3d_index(viewed_coord, viewed_size, index);
        
    if (!success) {
        gl_Position = vec4(0, 0, -3, 1);
        return;
    }

    uint filled = texelFetch(viewed, index).r;

    if ((filled & VIEW_STATE_VISIBLE) != 0u) {
        fragment_brightness = 1;
    } else if ((filled & VIEW_STATE_SEEN) != 0u) {
        fragment_brightness = SEEN_BRIGHTNESS;
    } else {
        gl_Position = vec4(0, 0, -2, 1);
        return;
    }
#endif
    gl_Position = projection * vec4(vertex_position, 1.0);
    fragment_uv = vertex_uv;
    fragment_outline_uv = vertex_outline_uv;
#else
    vec4 outline_color = texture(outline_bitmap, fragment_outline_uv);
    float outline_brightness = 1;
    if (outline_color.a == 1) {
        outline_brightness = 0.4;
    }

    vec4 bitmap_color = texture(bitmap, fragment_uv);
    
    float edge_brightness = 1;
#define GRID_THICKNESS 0.0625
    if (fragment_uv.x < GRID_THICKNESS || (1 - GRID_THICKNESS) < fragment_uv.x
     || fragment_uv.y < GRID_THICKNESS || (1 - GRID_THICKNESS) < fragment_uv.y) {
        edge_brightness = 0.9;
    }

    fragment_color = color * bitmap_color;
    fragment_color.rgb *= outline_brightness * edge_brightness;
#ifdef GAMEPLAY
    fragment_color.rgb *= fragment_brightness;
#endif
#endif
}
