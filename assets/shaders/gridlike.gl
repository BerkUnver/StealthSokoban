#ifdef VERTEX_SHADER
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec2 vertex_uv;
layout(location=2) in ivec3 vertex_viewed_offset;
#else
layout(location=0) out vec4 fragment_color;
#endif

uniform sampler2D bitmap;
uniform usamplerBuffer viewed;
uniform ivec3 viewed_size;
uniform ivec3 viewed_position;
uniform mat4 projection;
uniform vec4 color;

OUTIN vec2 fragment_uv;
OUTIN float fragment_brightness;


#ifdef VERTEX_SHADER
// :ShaderInclude we should have a way to use #includes in shaders.
// There is an extension called ARB_shading_language_include, can we use that?
// Or should we just do a preprocessing pass on the shader and have a first
// line with the includes?

// @Volatile :ViewState :ShaderInclude
#define VIEW_STATE_SEEN 1u
#define VIEW_STATE_VISIBLE 2u
#define SEEN_BRIGHTNESS 0.25

bool get_3d_index(in ivec3 position, in ivec3 size, out int index) {
    if ((position.x < 0 || size.x <= position.x)
     || (position.y < 0 || size.y <= position.y)
     || (position.z < 0 || size.z <= position.z)) {
        return false;
    } else {
        index = 
            position.y * size.x * size.z +
            position.z * size.x +
            position.x;
        return true;
    }
}
#endif

// @Speed figure out how to optimize branching
void main() {
#ifdef VERTEX_SHADER
    fragment_uv = vertex_uv;
    ivec3 viewed_coord = viewed_position + vertex_viewed_offset;
    
    int index;
    bool success = get_3d_index(viewed_coord, viewed_size, index);
        
    if (!success) {
        gl_Position = vec4(0, 0, -2, 1);
        return;
    }

    uint filled = texelFetch(viewed, index).r;

    if ((filled & VIEW_STATE_VISIBLE) != 0u) {
        fragment_brightness = 1;
        gl_Position = projection * vec4(vertex_position, 1.0);
    } else if ((filled & VIEW_STATE_SEEN) != 0u) {
        fragment_brightness = SEEN_BRIGHTNESS;
        gl_Position = projection * vec4(vertex_position, 1.0);
    } else {
        gl_Position = vec4(0, 0, -2, 1);
    }
#else
    vec4 regular_color = color * texture(bitmap, fragment_uv);
    fragment_color = vec4(regular_color.rgb * fragment_brightness, regular_color.a);
#endif
}
