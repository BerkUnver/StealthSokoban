#ifdef VERTEX_SHADER
layout(location=0) in vec3 vertex_position;
#else
layout(location=0) out vec4 fragment_color;
#endif

uniform usamplerBuffer viewed;
uniform ivec3 viewed_position;
uniform ivec3 viewed_size;

uniform mat4 model_to_world;
uniform mat4 world_to_camera;
uniform vec4 color;

#ifdef UNVIEWED_COLOR
uniform vec4 unviewed_color;
#endif

OUTIN vec3 fragment_position;

// @Volatile :ViewState :ShaderInclude @Copypasta from block.gl
#define VIEW_STATE_SEEN 1u
#define VIEW_STATE_VISIBLE 2u
#define SEEN_BRIGHTNESS 0.25

void main() {
#ifdef VERTEX_SHADER
    vec4 world_position = model_to_world * vec4(vertex_position, 1.0);
    fragment_position = world_position.xyz;
    gl_Position = world_to_camera * world_position;
#else
    ivec3 position = ivec3(floor(fragment_position)) - viewed_position;

    // :ShaderInclude @Copypasta from block.gl
    if ((position.x < 0 || viewed_size.x < position.x)
     || (position.y < 0 || viewed_size.y < position.y)
     || (position.z < 0 || viewed_size.z < position.z)) {
        discard;
    }
    
    int index = 
        position.y * viewed_size.x * viewed_size.z +
        position.z * viewed_size.x +
        position.x;
    
    uint filled = texelFetch(viewed, index).r;
    
    if ((filled & VIEW_STATE_VISIBLE) != 0u) {
        fragment_color = vec4((float(gl_FrontFacing) * color).rgb, 1.0);
#ifdef SEEN_COLOR
    } else if ((filled & VIEW_STATE_SEEN) != 0u) {
        fragment_color = color;
        fragment_color.rgb *= SEEN_BRIGHTNESS;
#endif
    } else {
#ifdef UNVIEWED_COLOR
        fragment_color = unviewed_color;
#else
        discard;
#endif
    }
#endif
}
