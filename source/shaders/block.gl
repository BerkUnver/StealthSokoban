#ifdef VERTEX_SHADER
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec2 vertex_uv;
layout(location=2) in ivec3 vertex_viewed_offset;
#else
layout(location=0) out vec4 fragment_color;
#endif

uniform sampler2D bitmap;
uniform usamplerBuffer viewed;
uniform ivec3 viewed_size;
uniform ivec3 viewed_position;
uniform mat4 projection;
uniform vec4 color;

OUTIN vec2 fragment_uv;
OUTIN float fragment_brightness;

// :ShaderInclude we should have a way to use #includes in shaders.
// There is an extension called ARB_shading_language_include, can we use that?
// Or should we just do a preprocessing pass on the shader and have a first
// line with the includes?

// @Volatile :ViewState :ShaderInclude
#define VIEW_STATE_SEEN 1u
#define VIEW_STATE_VISIBLE 2u

// @Speed figure out how to optimize branching
void main() {
#ifdef VERTEX_SHADER
    gl_Position = projection * vec4(vertex_position, 1.0);
    fragment_uv = vertex_uv;
    ivec3 viewed_coord = viewed_position + vertex_viewed_offset;

    // Setting gl_Position.w = 0 will cause the vertex to be clipped because
    /// x, y, z will get divided by w (zero) and become infinity.
    if ((viewed_coord.x < 0 && viewed_size.x <= viewed_coord.x)
     || (viewed_coord.y < 0 && viewed_size.y <= viewed_coord.y)
     || (viewed_coord.z < 0 && viewed_size.z <= viewed_coord.z)) {
        gl_Position.w = 0;
    } else {
        int index = 
            viewed_coord.y * viewed_size.x * viewed_size.z +
            viewed_coord.z * viewed_size.x +
            viewed_coord.x;
        uint filled = texelFetch(viewed, index).r;
        if ((filled & VIEW_STATE_VISIBLE) != 0u) {
            fragment_brightness = 1;
        } else if ((filled & VIEW_STATE_SEEN) != 0u) {
            fragment_brightness = 0.5;
        } else {
            gl_Position.w = 0;
        }
    }
#else
    vec4 regular_color = color * texture(bitmap, fragment_uv);
    fragment_color = vec4(regular_color.rgb * fragment_brightness, regular_color.a);
#endif
}
